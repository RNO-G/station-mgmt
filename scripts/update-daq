#! /usr/bin/env python3

import sys
import tempfile
import os

#usage
#  update-daq [-yschD] host[,host2,..]  repo0[[[:branch=default]/target=default]/target2=default2]

# example:   update-daq -y amaroq librno-g:feature/install-daq  stationrc



confirm = True  # require confirmation
sudo = False    # ask for sudo 
host = None
copy = False
just_print_defaults = False
repos = []

all_hosts=['amaroq','nanoq','avinngaq','terianniaq','ukaliatsiaq','ukaleq','qappik','tuttu']

def usage():
    print("update-daq [-Dyhsc] host[,host2,..] repo[[[:branch]/[^]make-target0]/[^]make-target1...]  [additional repos] ")
    print("  -y  yolo mode (no confirmation)")
    print("  -s  ask for sudo")
    print("  -h  useless help prompt")
    print("  -c  copy script, then run it, then delete it, rather than running it via pipe")
    print("  -D  just list defaults for the repos rather than doing anything else. (host not taken in this case)\n")
    print("    host something known to ssh, and can be comma separated for multiple hosts (or use 'all' for all known Greenland hosts)\n")
    print("    can list as many repos as you want, first repo name, then optionally a branch if not using the default branch after a colon, then optionally a slash separated list of make targets")
    print("    None is a special make target that doesn't run make (e.g. if there is no Makefile...)")
    print("    targets prepended with ^ will be called with sudo if the -s flag is passed")
    print()
    print("    Examples: ")
    print("    update-daq nanoq librno-g rno-g-ice-software  # update librno-g, rno-g-ice-software on nanoq with default branches, default install targets")
    print("    update-daq -y amaroq librno-g rno-g-ice-software:devel/install/cfg-install  # devel branch of rno-g-ice-sotware, run both install and cfg-install targets for rno-g-ice-sftware, no confirmation")
    print("    update-daq all stationrc # update stationrc on all stations")
    print("    update-daq all stationrc/None # update stationrc on all stations with explicit no make target (same as above since it's the default)")
    print("    update-daq -s amaroq rno-g-BBB-software # update rno-g-BBB-software on amaroq with sudo privileges")
    print("    update-daq -s amaroq rno-g-BBB-software/^install # update rno-g-BBB-software on amaroq with sudo privilege with explicit sudo target (same as above since it's the default)")


#git recipes
def get_default_branch(repo : str):
    if repo == "radiant-python":
        return "summit-branch"

    if repo in ("stationrc","micromini-firmware"):
        return "main"

    return "master"

#targets

def get_default_targets(repo : str):

    if repo == "librno-g":
        return ["install-daq"]

    if repo in ("stationrc","radiant-python","rnog_gps"):
        return []

    if repo in ("micromini-firmware","control-uC"):
        return ["client"]

    if repo == "rno-g-BBB-software":
        return ['^install']

    return ["install"]


for arg in sys.argv[1:]:
    if arg=="-y":
        confirm = False
    elif arg=="-s":
        sudo = True
    elif arg=="-c":
        copy = True
    elif arg=="-h":
        usage()
        sys.exit(0)
    elif arg == '-D':
        just_print_defaults = True
    elif host==None and not just_print_defaults:
        host = arg
    else:
        split_slashes = arg.split("/")
        if (split_slashes[0] == ''):
            print("Empty repo")
            sys.exit(1)
        split_colons = split_slashes[0].split(":")
        if len(split_colons) > 2 or split_colons[0] == '':
            print("Bad repo:branch specification")
            sys.exit(1)
        name = split_colons[0]
        if just_print_defaults:
            print("[%s]\n  default-branch: %s\n  default-targets: %s\n\n" % (name, get_default_branch(name), get_default_targets(name)))
        else:
            branch = get_default_branch(name) if len(split_colons) == 1 else split_colons[1]
            targets = get_default_targets(name) if len(split_slashes) == 1 else split_slashes[1:]
            if len(targets) > 0 and targets[0] == 'None':
                targets = []

            repos.append({"name": name, "branch": branch, "targets": targets})


if just_print_defaults:
    sys.exit(0)

if host == None or len(repos) == 0:
    usage()
    sys.exit(1)

hosts = host.split(',')

if len(hosts) == 1 and hosts[0].lower() == 'all':
    hosts = all_hosts

script = (R"""#! /bin/sh
cat /STATION_ID
""")

if sudo:
    script+="#get sudo privileges at beginning, since that's maybe slightly less annoying (unless they expire)\nsudo hostname\n"
else:
    script+=("hostname\n")

for repo in repos:

    script+=("\n#---\n#%s\n#---\n"%(repo['name']))
    script+=("cd /home/rno-g/%s\n" % (repo['name']))
    script+=("echo Handling %s\n" % (repo['name']))
    script+=("git checkout %s\ngit pull origin %s\n"% (repo['branch'], repo['branch']))
    for target in repo['targets']:
        if target[0]=='^':
            target=target[1:]
            if sudo:
                script+="sudo "
        script+=("make %s\n" %(target))

script += "\n\necho 'Done!'\n\n"

if confirm:
    print("We will send the following script via %s to '%s': " % ("copy" if copy else "pipe", str(hosts)))
    print(script)
    answer = input("Ok? [y/N] ").lower()

    if answer != "y":
        sys.exit(1)


with tempfile.NamedTemporaryFile(delete_on_close=False) as tmp:
    tmp.write(script.encode())
    tmp.close()
    for h in hosts:
        if copy:
            print(tmp.name)
            os.system("chmod +x %s" % (tmp.name))
            os.system("scp %s %s:.update_daq.sh && ssh -t %s \"./.update_daq.sh && rm ./.update_daq.sh\"" % (tmp.name,h, h))
        else:
            os.system("ssh -T %s < %s" % (h, tmp.name))


